# Standard Library
import json
import logging
from typing import (
    Any,
    Dict,
    List,
)

# Third Party Stuff
from telebot import TeleBot  # type: ignore

# My Stuff
# Local Application
from notification_listener.interfaces import INotificationSender, IDataStorage


class TelegramNotificationSender(INotificationSender):
    """Sends notifications to Telegram users with scrum_master role"""

    def __init__(
        self,
        data_storage: IDataStorage,
        bot: TeleBot,
        base_url: str = "https://taiga.smartist.dev",
    ) -> None:
        """Initialize sender with data storage and bot instance

        Args:
            data_storage: Data storage implementation for database access
            bot: Telegram bot instance
            base_url: Base URL for Taiga instance to generate links
        """
        self.logger = logging.getLogger("telegram_sender")
        self.data_storage = data_storage
        self.bot = bot
        self.base_url = base_url

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        self.event_translations = {
            "userstories.userstory.change": "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "userstories.userstory.create": "–°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "userstories.userstory.delete": "–£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "tasks.task.change": "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏",
            "tasks.task.create": "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
            "tasks.task.delete": "–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏",
            "epics.epic.change": "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —ç–ø–∏–∫–∞",
            "epics.epic.create": "–°–æ–∑–¥–∞–Ω–∏–µ —ç–ø–∏–∫–∞",
            "epics.epic.delete": "–£–¥–∞–ª–µ–Ω–∏–µ —ç–ø–∏–∫–∞",
            "issues.issue.change": "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
            "issues.issue.create": "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
            "issues.issue.delete": "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
            "milestones.milestone.change": "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø—Ä–∏–Ω—Ç–∞",
            "milestones.milestone.create": "–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø—Ä–∏–Ω—Ç–∞",
            "milestones.milestone.delete": "–£–¥–∞–ª–µ–Ω–∏–µ —Å–ø—Ä–∏–Ω—Ç–∞",
        }

    def get_scrum_masters(self) -> List[int]:
        """Get telegram_ids of all users with scrum_master role (id=1)

        Returns:
            List of telegram_ids
        """
        users = self.data_storage.get_users_by_role_id(1)  # scrum_master role_id=1
        if not users:
            self.logger.warning("No scrum masters found in database")
            return []

        telegram_ids = [user["telegram_id"] for user in users]
        return telegram_ids

    def send_notification(self, payload: Dict[str, Any]) -> None:
        """Send notification to all scrum masters

        Args:
            payload: The notification payload as a dictionary
        """
        self.logger.info("Sending notification to scrum masters")

        # Get all scrum masters telegram IDs
        telegram_ids = self.get_scrum_masters()
        if not telegram_ids:
            self.logger.warning("No scrum masters to notify")
            return

        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π payload –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            payload_str = json.dumps(payload, ensure_ascii=False)
            self.logger.info(f"Received payload: {payload_str}")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –∏ JSONB-–¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            event_type = payload.get("event_type", "unknown")
            timeline_data = None

            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ timeline_timeline –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
            if "data" in payload and payload["data"]:
                # data –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π JSON –∏–ª–∏ —É–∂–µ —Å–ª–æ–≤–∞—Ä–µ–º
                if isinstance(payload["data"], str):
                    try:
                        timeline_data = json.loads(payload["data"])
                    except json.JSONDecodeError:
                        self.logger.error("Failed to parse data JSON string")
                else:
                    timeline_data = payload["data"]
                self.logger.debug("Successfully parsed timeline data")

            if not timeline_data:
                self.logger.warning("No valid data found in payload")
                timeline_data = {}

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
            # –î–ª—è –∑–∞–¥–∞—á, –∏—Å—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ —Ç.–¥. —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–∑–Ω–∞—è
            content_type = "unknown"
            subject = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            ref = None
            project_slug = None
            object_data = {}

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            if "project" in timeline_data:
                project = timeline_data.get("project", {})
                project_slug = project.get("slug")

            # –°–æ–±—ã—Ç–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ values_diff –∏ comment_html
            changes_description = []

            if event_type.startswith("userstories."):
                content_type = "us"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –≤ URL
                object_data = timeline_data.get("userstory", {})
            # –°–æ–±—ã—Ç–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å –∑–∞–¥–∞—á–µ–π
            elif event_type.startswith("tasks."):
                content_type = "task"
                object_data = timeline_data.get("task", {})

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                if event_type == "tasks.task.create" and "owner" in object_data:
                    owner = object_data.get("owner")
                    owner_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

                    if isinstance(owner, dict):
                        if "id" in owner:
                            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                            owner_id = owner["id"]
                            owner_data = self.data_storage.get_taiga_user_by_id(
                                owner_id
                            )
                            if owner_data:
                                if owner_data.get("full_name"):
                                    owner_name = owner_data["full_name"]
                                elif owner_data.get("username"):
                                    owner_name = owner_data["username"]
                                else:
                                    owner_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{owner_id}"
                        elif "name" in owner:
                            owner_name = owner["name"]

                    changes_description.append(f"üìù –°–æ–∑–¥–∞—Ç–µ–ª—å: {owner_name}")

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
                if event_type == "tasks.task.create" and "assigned_to" in object_data:
                    assigned = object_data.get("assigned_to")
                    if assigned:
                        assigned_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

                        if isinstance(assigned, dict):
                            if "id" in assigned:
                                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                                assigned_id = assigned["id"]
                                assigned_data = self.data_storage.get_taiga_user_by_id(
                                    assigned_id
                                )
                                if assigned_data:
                                    if assigned_data.get("full_name"):
                                        assigned_name = assigned_data["full_name"]
                                    elif assigned_data.get("username"):
                                        assigned_name = assigned_data["username"]
                                    else:
                                        assigned_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{assigned_id}"
                            elif "name" in assigned:
                                assigned_name = assigned["name"]

                        changes_description.append(f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assigned_name}")

            # –°–æ–±—ã—Ç–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å —ç–ø–∏–∫–æ–º
            elif event_type.startswith("epics."):
                content_type = "epic"
                object_data = timeline_data.get("epic", {})
            # –°–æ–±—ã—Ç–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å –∑–∞–¥–∞—á–µ–π –≤ —Å–ø—Ä–∏–Ω—Ç–µ
            elif event_type.startswith("milestones."):
                content_type = "milestone"
                object_data = timeline_data.get("milestone", {})
            # –°–æ–±—ã—Ç–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å issue
            elif event_type.startswith("issues."):
                content_type = "issue"
                object_data = timeline_data.get("issue", {})

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—â–∏–µ –ø–æ–ª—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞
            subject = object_data.get("subject", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            ref = object_data.get("ref")

            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            event_description = self.event_translations.get(
                event_type, f"–°–æ–±—ã—Ç–∏–µ: {event_type}"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è URL
            if project_slug and ref:
                url = f"{self.base_url}/project/{project_slug}/{content_type}/{ref}"
            else:
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                self.logger.warning(
                    f"Missing URL parameters: project_slug={project_slug}, "
                    f"ref={ref}, content_type={content_type}"
                )
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –¥–æ –ø—Ä–æ–µ–∫—Ç–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω slug –ø—Ä–æ–µ–∫—Ç–∞
                if project_slug:
                    url = f"{self.base_url}/project/{project_slug}"
                else:
                    url = self.base_url

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
            project_name = "–ü—Ä–æ–µ–∫—Ç"
            if project and "name" in project:
                project_name = project.get("name", "–ü—Ä–æ–µ–∫—Ç")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            comment_html = timeline_data.get("comment_html", "")
            user = timeline_data.get("user", {})

            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ª–∏–±–æ –∏–∑ payload, –ª–∏–±–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

            # –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            self.logger.debug(
                f"User data in payload: {json.dumps(user, ensure_ascii=False)}"
            )

            if "name" in user and user["name"]:
                # –ò–º—è –µ—Å—Ç—å –≤ payload
                user_name = user["name"]
                self.logger.debug(f"Using name from payload: {user_name}")
            elif "id" in user and user["id"]:
                # –ò–º—è –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                user_id = user["id"]
                self.logger.debug(f"Fetching taiga user with id {user_id}")

                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –±–æ–ª–µ–µ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
                try:
                    # –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ self.data_storage —ç—Ç–æ PostgresDataStorage
                    direct_query = """
                    SELECT id, username, full_name, username as name
                    FROM users_user
                    WHERE id = %(user_id)s
                    """
                    args = {"user_id": user_id}
                    self.logger.info(
                        f"DEBUG: Trying direct query for user_id={user_id}"
                    )
                    direct_user = self.data_storage.get_one(direct_query, args)
                    self.logger.info(f"DEBUG: Direct query result: {direct_user}")

                    if direct_user:
                        self.logger.info(
                            f"DEBUG: User found: full_name={direct_user.get('full_name')}, username={direct_user.get('username')}"
                        )
                        if direct_user.get("full_name"):
                            user_name = direct_user["full_name"]
                            self.logger.info(
                                f"Using direct query full_name: {user_name}"
                            )
                except Exception as e:
                    self.logger.error(f"Error getting direct user: {str(e)}")

                # –ï—Å–ª–∏ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
                self.logger.info(
                    f"DEBUG: Trying get_taiga_user_by_id query for user_id={user_id}"
                )
                taiga_user = self.data_storage.get_taiga_user_by_id(user_id)
                if taiga_user:
                    self.logger.info(
                        f"DEBUG: Found taiga_user in database: {json.dumps(taiga_user)}"
                    )
                    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: full_name > username > id
                    if taiga_user.get("full_name"):
                        user_name = taiga_user["full_name"]
                        self.logger.info(
                            f"DEBUG: Using full_name from database: {user_name}"
                        )
                    elif taiga_user.get("username"):
                        user_name = taiga_user["username"]
                        self.logger.info(
                            f"DEBUG: Using username from database: {user_name}"
                        )
                    else:
                        user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user_id}"
                        self.logger.info(f"DEBUG: Using user ID as name: {user_name}")
                else:
                    self.logger.warning(
                        f"DEBUG: User with id {user_id} not found in database"
                    )
                    user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user_id}"
            else:
                self.logger.warning("No user identification in payload")

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –≤–Ω–µ—Å—à–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if user_name != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å":
                changes_description.append(f"üë§ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω—ë—Å: {user_name}")

            if comment_html and comment_html.strip():
                # –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                comment_text = comment_html.replace("<p>", "").replace("</p>", "")
                comment_text = comment_text.strip()
                if comment_text:
                    changes_description.append(f"üí¨ {user_name}: {comment_text}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ values_diff
            values_diff = timeline_data.get("values_diff", {})
            if values_diff:
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                if "status" in values_diff:
                    status_change = values_diff["status"]
                    if isinstance(status_change, list) and len(status_change) >= 2:
                        old_status = status_change[0]
                        new_status = status_change[1]
                        changes_description.append(
                            f"üîÑ –°—Ç–∞—Ç—É—Å: {old_status} ‚Üí {new_status}"
                        )

                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                if "assigned_to" in values_diff:
                    assigned_change = values_diff["assigned_to"]
                    if isinstance(assigned_change, list) and len(assigned_change) >= 2:
                        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                        old_assigned = assigned_change[0]
                        new_assigned = assigned_change[1]

                        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
                        old_assigned_name = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
                        new_assigned_name = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"

                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
                        if old_assigned:
                            if isinstance(old_assigned, dict) and "id" in old_assigned:
                                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ –±–∞–∑—ã
                                old_user_id = old_assigned["id"]
                                old_user = self.data_storage.get_taiga_user_by_id(
                                    old_user_id
                                )
                                if old_user:
                                    if old_user.get("full_name"):
                                        old_assigned_name = old_user["full_name"]
                                    elif old_user.get("username"):
                                        old_assigned_name = old_user["username"]
                                    else:
                                        old_assigned_name = (
                                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{old_user_id}"
                                        )
                            elif (
                                isinstance(old_assigned, dict)
                                and "name" in old_assigned
                            ):
                                old_assigned_name = old_assigned["name"]

                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
                        if new_assigned:
                            if isinstance(new_assigned, dict) and "id" in new_assigned:
                                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ –±–∞–∑—ã
                                new_user_id = new_assigned["id"]
                                new_user = self.data_storage.get_taiga_user_by_id(
                                    new_user_id
                                )
                                if new_user:
                                    if new_user.get("full_name"):
                                        new_assigned_name = new_user["full_name"]
                                    elif new_user.get("username"):
                                        new_assigned_name = new_user["username"]
                                    else:
                                        new_assigned_name = (
                                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{new_user_id}"
                                        )
                            elif (
                                isinstance(new_assigned, dict)
                                and "name" in new_assigned
                            ):
                                new_assigned_name = new_assigned["name"]

                        changes_description.append(
                            f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {old_assigned_name} ‚Üí {new_assigned_name}"
                        )

                # –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ backlog_order
                if "backlog_order" in values_diff:
                    changes_description.append("üìã –ò–∑–º–µ–Ω–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –≤ –±–µ–∫–ª–æ–≥–µ")

                # –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
                if "custom_attributes" in values_diff:
                    custom_attrs = values_diff["custom_attributes"]

                    # –ù–æ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                    for attr in custom_attrs.get("new", []):
                        attr_name = attr.get("name", "")
                        attr_value = attr.get("value", "")

                        if attr_name and attr_value:
                            value_diff = attr.get("value_diff")
                            if isinstance(value_diff, list) and len(value_diff) >= 2:
                                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                                old_val = (
                                    "-" if value_diff[0] is None else value_diff[0]
                                )
                                new_val = (
                                    "-" if value_diff[1] is None else value_diff[1]
                                )
                                changes_description.append(
                                    f"üìù {attr_name}: {old_val} ‚Üí {new_val}"
                                )
                            else:
                                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                                changes_description.append(
                                    f"üìù {attr_name}: {attr_value}"
                                )

                    # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                    for attr in custom_attrs.get("changed", []):
                        attr_name = attr.get("name", "")
                        if (
                            "value_diff" in attr
                            and isinstance(attr["value_diff"], list)
                            and len(attr["value_diff"]) >= 2
                        ):
                            value_diff = attr["value_diff"]
                            old_val = "-" if value_diff[0] is None else value_diff[0]
                            new_val = "-" if value_diff[1] is None else value_diff[1]
                            changes_description.append(
                                f"üìù {attr_name}: {old_val} ‚Üí {new_val}"
                            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
            changes_block = ""
            if changes_description:
                changes_block = "\n".join(changes_description)

            # Format message
            message = (
                f"<b>{project_name}</b>\n<b>{event_description}</b>\n<i>{subject}</i>\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
            if changes_block:
                message += f"\n{changes_block}\n"

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
            message += f"<a href='{url}'>–û—Ç–∫—Ä—ã—Ç—å –≤ Taiga</a>"
        except Exception as e:
            self.logger.error(f"Error formatting message: {str(e)}")
            # Fallback to raw payload if formatting fails
            payload_str = json.dumps(payload, indent=2, ensure_ascii=False)
            message = f"<code>{payload_str}</code>"

        # –ü–æ–ª—É—á–∞–µ–º telegram_id –∞–≤—Ç–æ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
        author_telegram_id = None
        if "id" in user and user["id"]:
            user_id = user["id"]
            taiga_user = self.data_storage.get_taiga_user_by_id(user_id)
            if taiga_user and taiga_user.get("telegram_id"):
                author_telegram_id = taiga_user["telegram_id"]
                self.logger.info(f"Author telegram_id: {author_telegram_id}")

        # Send to each scrum master
        for telegram_id in telegram_ids:
            # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if author_telegram_id and telegram_id == author_telegram_id:
                self.logger.info(f"Skipping notification to author {telegram_id}")
                continue

            try:
                self.bot.send_message(
                    chat_id=telegram_id, text=message, parse_mode="HTML"
                )
                self.logger.info(f"Notification sent to user {telegram_id}")
            except Exception as e:
                self.logger.error(
                    f"Failed to send notification to {telegram_id}: {str(e)}"
                )
